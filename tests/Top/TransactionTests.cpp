// Copyright Â© 2017-2020 Trust Wallet.
//
// This file is part of Trust. The full Trust copyright notice, including
// terms governing use, modification, and redistribution, is contained in the
// file LICENSE at the root of the source code distribution tree.

#include "Top/Transaction.h"

#include "HexCoding.h"
#include "Ethereum/RLP.h"
#include <gtest/gtest.h>

using namespace TW;
using namespace TW::Top;

TEST(TopTransaction, Encode) {
    Data from = data(std::string("T8000066ab344963eaa071f9636faac26b0d1a39900325"));
    Data to = data(std::string("T8000066ab344963eaa071f9636faac26b0d1a39900325"));
    auto transaction = Transaction(from, to, 4, 1, 2, 3, 5, 6, 7, {}, {});
    //ASSERT_EQ(hex(transaction.encode()), "f8ecb8ea04000000000000000000000003000000640077860c610000000000000000000000000700000000000000000000000000000000000000000000000000000000000000050000002e00000054383030303036366162333434393633656161303731663936333666616163323662306431613339393030333235000000000c000000000000000100000000000000000000000000000000000000060000002e00000054383030303036366162333434393633656161303731663936333666616163323662306431613339393030333235000000000c0000000000000001000000000000000000000000000000");
}

TEST(TopTransaction, EncodeWithData) {
    Data from = data(std::string("T8000066ab344963eaa071f9636faac26b0d1a39900325"));
    Data to = data(std::string("T8000066ab344963eaa071f9636faac26b0d1a39900325"));
    auto transaction = Transaction(from, to, 4, 1, 2, 3, 5, 6, 7, data("12345678"), data("top unit test"));
    //ASSERT_EQ(hex(transaction.encode()), "f8f9b8f704000000000000000000000003000000640077860c610000000000000000000000000700000000000000000000000000000000000000000000000d000000746f7020756e6974207465737400000000050000002e00000054383030303036366162333434393633656161303731663936333666616163323662306431613339393030333235000000000c000000000000000100000000000000000000000000000000000000060000002e00000054383030303036366162333434393633656161303731663936333666616163323662306431613339393030333235000000000c0000000000000001000000000000000000000000000000");
}

TEST(TopTransaction, decode) {
    Data strtemp = parse_hex(
        "f9019cb90135040000000000000000000000000000806400cab30b610000000000000000000000000000000000000000f52c63705dbee9f60000000000000000080000006170695f7465737400000000000000002e00000054383030303061313930303133303038643236623065633035323436613066326463393566653834313930393335000000000c000000000000006400000000000000000000002c0000007b22706172656e745f6163636f756e74223a2022222c2022617574686f72697a6174696f6e223a223078227d00000000060000002e00000054383030303065303231353734633335376239306464373561373234623463633734663931643364353130356463000000000c00000000000000640000000000000000000000170000007b22617574686f72697a6174696f6e223a20223078227da0ae46aefbdfcba272663bf4e864d721811c2bd47d4d6778f6d99e723b70af3ea9b8410143d0fedb916a1276b8a459145dd8a8b3ddbff4868e146446948cbf99b4b061ba1aa6c743ea3140665407c17d7a76fe132432066a6844144b508fe43a5782b829"
        );

    TW::Ethereum::RLP::DecodedItem decoded = Ethereum::RLP::decode(strtemp);

    std::vector<std::string> vecData;
    for (int i = 0; i < (int)decoded.decoded.size(); i++)
    {
        std::string str(decoded.decoded[i].begin(), decoded.decoded[i].end());
        vecData.push_back(str);
        std::cout << "data" << i << ": " << hex(str) << std::endl;
    }
}